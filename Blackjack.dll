using System;
using System.Collections.Generic;
using System.Windows.Forms;

using System;
using System.Runtime.InteropServices;

class Program
{
    [DllImport("Blackjack.dll")]
    public static extern int MyFunction(); // Exemplu de funcție din DLL

    static void Main()
    {
        int result = MyFunction();
        Console.WriteLine("Rezultatul din DLL: " + result);
    }
}


namespace BlackjackGame
{
    public partial class Form1 : Form
    {
        private List<int> playerHand;
        private List<int> dealerHand;
        private int playerWins = 0;
        private int dealerWins = 0;

        public Form1()
        {
            InitializeComponent();
            InitializeGame();
        }

        private void InitializeGame()
        {
            playerHand = new List<int>();
            dealerHand = new List<int>();

            // Inițializează mâinile cu două cărți fiecare
            playerHand.Add(GetRandomCard());
            playerHand.Add(GetRandomCard());

            dealerHand.Add(GetRandomCard());
            dealerHand.Add(GetRandomCard());

            // Actualizează interfața grafică cu cărțile inițiale
            UpdateUI();
        }

        private int GetRandomCard()
        {
            Random rand = new Random();
            return rand.Next(1, 14); // Valori posibile: 1-13 (A, 2-10, J, Q, K)
        }

        private void UpdateUI()
        {
            // Actualizează etichetele cu mâinile și scorurile
            lblPlayerHand.Text = "Mâna ta: " + string.Join(", ", playerHand);
            lblPlayerScore.Text = "Scor: " + CalculateHandValue(playerHand).ToString();

            lblDealerHand.Text = "Mâna dealer-ului: " + dealerHand[0] + ", ?";
            lblDealerScore.Text = "Scor: ?";

            // Actualizează numărul de runde câștigate
            lblPlayerWins.Text = "Runde câștigate de tine: " + playerWins.ToString();
            lblDealerWins.Text = "Runde câștigate de dealer: " + dealerWins.ToString();
        }

        private int CalculateHandValue(List<int> hand)
        {
            // Implementarea funcției CalculateHandValue din C++ poate fi transpusă aici
            // ...
        }

        private void btnHit_Click(object sender, EventArgs e)
        {
            // Implementează logica pentru a lua o carte suplimentară
            // ...
        }

        private void btnStand_Click(object sender, EventArgs e)
        {
            // Implementează logica pentru a încheia runda
            // ...
        }

        private void btnNewGame_Click(object sender, EventArgs e)
        {
            // Implementează logica pentru a începe un nou joc
            // ...
        }
    }
}
